{"version":3,"sources":["components/network/Nodes.js","components/network/NodeMap/async.js","components/common/Icon.js","components/common/BarChart.js"],"names":["Nodes","props","buildNodeList","nodes","state","nodesByCountry","node","country","name","total","push","countries","Object","values","c","reverse","setCountryHover","activeCountry","setState","loadNodes","xhr","get","API_URL","data","syncStatus","showAllCountries","size","show3D","location","shownCountries","slice","length","map","index","marginLeft","padding","height","Component","mapStateToProps","mapDispatchToProps","$script","require","NodeMapAsync","LoadingComponent","resolve","Promise","WidgetIcon","className","BarReact","id","Math","random","replace","barId","intl","myChart","echarts","getInstanceByDom","document","getElementById","undefined","init","config","barChart","title","text","yAxis","series","itemStyle","normal","color","graphic","LinearGradient","offset","emphasis","dataOpt","others","val","setOption","initBar","style","React","pure"],"mappings":"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","file":"static/js/Nodes.492c5f03.chunk.js","sourcesContent":["/*eslint-disable no-script-url*/\nimport React, {Component} from 'react';\nimport xhr from \"axios/index\";\nimport {connect} from \"react-redux\";\nimport {loadNodes} from \"../../actions/network\";\nimport {filter, maxBy, sortBy, sumBy} from \"lodash\";\nimport {tu} from \"../../utils/i18n\";\nimport {TronLoader} from \"../common/loaders\";\nimport {NodeMapAsync} from \"./NodeMap/async\";\nimport {getQueryParam} from \"../../utils/url\";\nimport {WidgetIcon} from \"../common/Icon\";\nimport BarReact from \"../common/BarChart\";\nimport {API_URL} from \"../../constants\";\n\nclass Nodes extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showAllCountries: false,\n      size: 5,\n      nodes: [],\n      syncStatus: \"waiting\",\n      show3D: getQueryParam(props.location, \"mode\") === \"3d\",\n    };\n  }\n\n  buildNodeList = () => {\n    let {nodes} = this.state;\n\n    let nodesByCountry = {};\n    for (let node of nodes) {\n      if (!nodesByCountry[node.country]) {\n        nodesByCountry[node.country] = {\n          name: node.country,\n          nodes: [],\n          total: 0,\n        }\n      }\n      nodesByCountry[node.country].nodes.push(node);\n      nodesByCountry[node.country].total++;\n    }\n\n    let countries = Object.values(nodesByCountry);\n    countries = sortBy(countries, c => c.total);\n    countries = filter(countries, c => c.name !== \"\");\n    countries.reverse();\n\n    return countries;\n  };\n\n  setCountryHover = (activeCountry) => {\n    this.setState({\n      activeCountry\n    });\n  };\n\n  renderList() {\n    let {showAllCountries, size} = this.state;\n    let {nodes} = this.state;\n    let shownCountries = this.buildNodeList();\n\n    if (!showAllCountries) {\n      shownCountries = shownCountries.slice(0, size);\n    }\n\n    if (nodes.length === 0) {\n      return (\n          <div className=\"d-flex justify-content-center p-4\">\n            <TronLoader/>\n          </div>\n      );\n    }\n\n    return (\n        <ul className=\"list-group list-group-flush\">\n          {\n            shownCountries.map((country, index) => (\n                <li key={country.name} className=\"list-group-item d-flex\">\n                  {country.name}\n                  <span className=\"ml-auto\">\n                {country.total}\n              </span>\n                </li>\n            ))\n          }\n        </ul>\n    );\n  }\n\n  loadNodes = async () => {\n    // let {nodes, status} = await Client.getNodeLocations();\n    let {data} = await xhr.get(`${API_URL}/api/nodemap`);\n    this.setState({\n      nodes: data.data,\n      syncStatus: null,\n    });\n  };\n\n  componentDidMount() {\n    this.loadNodes();\n  }\n\n  render() {\n\n    let {nodes, syncStatus} = this.state;\n    let countries = this.buildNodeList();\n    if (syncStatus === \"waiting_for_first_sync\") {\n      return (\n          <main className=\"container header-overlap\">\n            <div className=\"card\">\n              <TronLoader>\n                {tu(\"first_node_sync_message\")}\n              </TronLoader>\n            </div>\n          </main>\n      );\n    }\n\n    if (nodes.length === 0) {\n      return (\n          <main className=\"container header-overlap\">\n            <div className=\"card\">\n              <TronLoader>\n                {tu(\"loading_nodes\")}\n              </TronLoader>\n            </div>\n          </main>\n      );\n    }\n\n    return (\n        <main className=\"container header-overlap _nodemap\">\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <div className=\"card h-100 text-left widget-icon bg-line_red bg-image_node\">\n                <div className=\"card-body _node\" style={{marginLeft: '50px'}}>\n                  <h3 className=\"text-secondary\">\n                    {nodes.length}\n                  </h3>\n                  {tu(\"nodes\")}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"col-md-6 mt-3 mt-md-0\">\n              <div className=\"card h-100 text-left widget-icon bg-line_green bg-image_nodest\">\n                <div className=\"card-body _node\" style={{marginLeft: '50px'}}>\n                  {\n                    countries.length > 0 ?\n                        <h3 className=\"text-primary\">\n                          {maxBy(countries, c => c.total).name}\n                        </h3> :\n                        <h3 className=\"text-primary\">\n                          Unknown\n                        </h3>\n                  }\n                  {tu(\"most_nodes\")}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"row mt-3\">\n            <div className=\"col-md-12\">\n              <div className=\"card\" style={{padding: '20px'}}>\n                <NodeMapAsync nodes={nodes} countries={countries}/>\n              </div>\n            </div>\n          </div>\n          <div className=\"row mt-3\">\n            <div className=\"col-md-12\">\n              <div className=\"card\">\n                <div className=\"card-body _node\">\n                  <h5 className=\"card-title text-center\">\n                    {tu(\"nodes_ranking\")}\n                    <br/>\n                    {tu(\"split_by_country\")}\n                  </h5>\n                  <div style={{height: 500}}>\n                    {\n                      countries === null ?\n                          <TronLoader/> :\n                          <BarReact style={{height: 500}} data={countries}/>\n                    }\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          {/*\n              <div className=\"row mt-3\">\n                <div className=\"col-md-12\">\n                  <div className=\"card\">\n                    <table className=\"table table-hover table-striped bg-white m-0\">\n                      <thead className=\"thead-dark\">\n                      <tr>\n                        <th style={{width: 150}}>{tu(\"IP\")}</th>\n                        <th className=\"text-nowrap d-none d-lg-table-cell\">{tu(\"Hostname\")}</th>\n                        <th className=\"text-right text-nowrap d-none d-sm-table-cell\">{tu(\"height\")}</th>\n                        <th style={{width: 50}} className=\"text-center text-nowrap\">{tu(\"GRPC\")}</th>\n                        <th style={{width: 100}}\n                            className=\"text-center text-nowrap d-none d-md-table-cell\">{tu(\"GRPC m/s\")}</th>\n                        <th style={{width: 100}} className=\"text-right text-nowrap\">{tu(\"Last Update\")}</th>\n                      </tr>\n                      </thead>\n                      <tbody>\n                      {\n                        nodes.map((node, index) => (\n                            <tr key={index}>\n                              <td>{node.ip}</td>\n                              <td className=\"text-nowrap d-none d-lg-table-cell\">\n                                <div className=\"text-truncate\" style={{maxWidth: 300}}>\n                                  {node.hostname}\n                                </div>\n                              </td>\n                              <td className=\"text-right text-nowrap d-none d-sm-table-cell\">\n                                {node.lastBlock === 0 ? '-' : node.lastBlock}\n                              </td>\n                              <td className=\"text-center text-nowrap d-none d-sm-table-cell\">\n                                {node.grpcEnabled ? <span key=\"no\" className=\"text-success\"><i\n                                    className=\"fas fa-circle\"/></span> : null}\n                              </td>\n                              <td className=\"text-right text-nowrap\">\n                                {\n                                  node.grpcEnabled ? (node.grpcResponseTime + ' ms') : '-'\n                                }\n                              </td>\n                              <td className=\"text-right text-nowrap\">\n                                <TimeAgo date={node.lastSeen}/>\n                              </td>\n                            </tr>\n                        ))\n                      }\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </div>\n              */\n          }\n        </main>\n    )\n  }\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    // nodes: state.network.nodes,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadNodes,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Nodes)\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/network/Nodes.js","import React from \"react\";\nimport {asyncComponent} from \"react-async-component\";\nimport {TronLoader} from \"../../common/loaders\";\nimport {tu} from \"../../../utils/i18n\";\n\nconst $script = require(\"scriptjs\");\n\n\nexport const NodeMapAsync = asyncComponent({\n  LoadingComponent: () => (\n      <div className=\"card\">\n        <TronLoader>\n          {tu(\"loading_map\")}\n        </TronLoader>\n      </div>\n  ),\n  resolve: () => new Promise(resolve =>\n      // Webpack's code splitting API w/naming\n      require.ensure(\n          [],\n          (require) => {\n            $script(\"\", () => {\n              resolve(require('./NodeMap'));\n            });\n          },\n          'NodeMap'\n      )\n  )\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/network/NodeMap/async.js","import React from \"react\";\n\n\nexport function WidgetIcon({className, ...props}) {\n  return (\n    <span className=\"icon-big\" {...props}>\n      <i className={\" fa-7x \" + className} />\n    </span>\n  )\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/common/Icon.js","import React from 'react'\nimport {injectIntl} from \"react-intl\";\nimport config from './chart.config.js'\n\nimport echarts from 'echarts/lib/echarts'\nimport 'echarts/lib/chart/bar'\nimport 'echarts/lib/component/title'\nimport 'echarts/lib/component/tooltip'\nimport {connect} from \"react-redux\";\n\nexport class BarReact extends React.Component {\n\n  constructor(props) {\n    super(props)\n    let id = ('_' + Math.random()).replace('.', '_');\n    this.state = {\n      barId: 'bar' + id\n    }\n  }\n\n  initBar(id) {\n    let {intl, data} = this.props;\n\n    let myChart = echarts.getInstanceByDom(document.getElementById(id));\n    if (myChart === undefined) {\n      myChart = echarts.init(document.getElementById(id));\n    }\n    config.barChart.title.text = '';\n    config.barChart.yAxis.data = [];\n    config.barChart.series[0].data = [];\n    config.barChart.series[0].itemStyle = {\n      normal: {\n        color: new echarts.graphic.LinearGradient(\n            0, 0, 1, 0,\n            [\n              {offset: 0, color: '#ed213a'},\n              {offset: 1, color: '#93291e'}\n            ]\n        )\n      },\n      emphasis: {\n        color: new echarts.graphic.LinearGradient(\n            0, 0, 1, 0,\n            [\n              {offset: 0, color: '#0052d4'},\n              {offset: 1, color: '#0052d4'}\n            ]\n        )\n      }\n    }\n\n    let dataOpt = [];\n    let others = {name: 'Others', total: 0};\n    data.map((val) => {\n      if (val.total > 10 && val.name !== null) {\n        dataOpt.push(val)\n      }\n      else {\n        others.total = others.total + val.total;\n      }\n    })\n    dataOpt.push(others);\n\n    if (dataOpt && dataOpt.length > 0) {\n      dataOpt.map((val) => {\n        config.barChart.yAxis.data.push(val.name);\n        config.barChart.series[0].data.push(val.total);\n      })\n    }\n\n    if (dataOpt && dataOpt.length === 0) {\n      config.barChart.title.text = \"No data\";\n    }\n    myChart.setOption(config.barChart);\n\n  }\n\n  componentDidMount() {\n    this.initBar(this.state.barId);\n  }\n\n  componentDidUpdate() {\n    this.initBar(this.state.barId);\n  }\n\n  render() {\n    return (\n        <div>\n          <div id={this.state.barId} style={this.props.style}></div>\n        </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {}\n}\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps, null, {pure: false})(injectIntl(BarReact));\n\n\n// WEBPACK FOOTER //\n// ./src/components/common/BarChart.js"],"sourceRoot":""}
{"version":3,"sources":["components/Accounts.js"],"names":["Accounts","loadAccounts","page","pageSize","setState","loading","Client","getAccounts","sort","limit","start","accounts","total","rangeTotal","onChange","onSearchFieldChangeHandler","e","searchString","target","value","customizedColumn","intl","props","column","title","formatMessage","id","dataIndex","key","align","className","width","render","text","record","index","accountType","toAddressType","parseInt","ONE_TRX","CIRCULATING_SUPPLY","state","toUpperCase","length","a","address","indexOf","map","account","balance","power","match","tableInfo","tableInfoTip","left","Component","mapStateToProps","app","mapDispatchToProps"],"mappings":"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","file":"static/js/Accounts.80874621.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport {connect} from \"react-redux\";\nimport {loadAccounts} from \"../actions/app\";\nimport {tu} from \"../utils/i18n\";\nimport {FormattedNumber, injectIntl} from \"react-intl\";\nimport {filter} from \"lodash\";\nimport {AddressLink} from \"./common/Links\";\nimport {CIRCULATING_SUPPLY, ONE_TRX} from \"../constants\";\nimport {TRXPrice} from \"./common/Price\";\nimport SmartTable from \"./common/SmartTable.js\"\nimport {upperFirst} from \"lodash\";\nimport {TronLoader} from \"./common/loaders\";\nimport {QuestionMark} from \"./common/QuestionMark\";\nimport xhr from \"axios/index\";\nimport {Client} from \"../services/api\";\nimport {Tooltip} from 'antd'\n\n\nclass Accounts extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      loading: true,\n      searchString: \"\",\n      accounts: [],\n      total: 0,\n    }\n  }\n\n  componentDidMount() {\n    this.loadAccounts();\n  }\n\n  loadAccounts = async (page = 1, pageSize = 20) => {\n\n    this.setState({loading: true});\n\n    let {accounts, total, rangeTotal} = await Client.getAccounts({\n      sort: '-balance',\n      limit: pageSize,\n      start: (page - 1) * pageSize\n    })\n\n     // let {txOverviewStats} = await Client.getTxOverviewStats();\n    this.setState({\n      loading: false,\n      accounts: accounts,\n      total: total,\n      rangeTotal:rangeTotal,\n    });\n  };\n\n  componentDidUpdate() {\n    //checkPageChanged(this, this.loadAccounts);\n  }\n\n  onChange = (page, pageSize) => {\n    this.loadAccounts(page, pageSize);\n  };\n  onSearchFieldChangeHandler = (e) => {\n    this.setState({\n      searchString: e.target.value,\n    });\n  };\n\n  filteredAccounts() {\n    let {accounts} = this.props;\n    let {searchString} = this.state;\n\n    searchString = searchString.toUpperCase();\n\n    if (searchString.length > 0) {\n      accounts = filter(accounts, a => a.address.toUpperCase().indexOf(searchString) !== -1);\n    }\n\n    return accounts;\n  }\n\n  renderAccounts() {\n\n    let {accounts} = this.state;\n\n    if (accounts.length === 0) {\n      return;\n    }\n\n    return (\n        <Fragment>\n          <div className=\"table-responsive\">\n            <table className=\"table table-striped m-0\">\n              <thead className=\"thead-dark\">\n              <tr>\n                <th>{tu(\"address\")}</th>\n                <th className=\"d-md-table-cell\">{tu(\"supply\")}</th>\n                <th className=\"d-md-table-cell\">{tu(\"power\")}</th>\n                <th>{tu(\"balance\")}</th>\n              </tr>\n              </thead>\n              <tbody>\n              {\n                accounts.map((account, index) => (\n                    <tr key={account.address}>\n                      <th>\n                        <AddressLink address={account.address}/>\n                      </th>\n                      <td className=\"d-md-table-cell text-nowrap\">\n                        <FormattedNumber\n                            value={(((account.balance / ONE_TRX) / CIRCULATING_SUPPLY) * 100)}\n                            minimumFractionDigits={8}\n                            maximumFractionDigits={8}\n                        /> %\n                      </td>\n                      <td className=\"text-nowrap d-md-table-cell\">\n                        <FormattedNumber value={account.power / ONE_TRX}/>\n                      </td>\n                      <td className=\"text-nowrap\">\n                        <TRXPrice amount={account.balance / ONE_TRX}/>\n                      </td>\n                    </tr>\n                ))\n              }\n              </tbody>\n            </table>\n          </div>\n\n        </Fragment>\n    )\n  }\n\n  customizedColumn = () => {\n    let {intl} = this.props;\n    let column = [\n      {\n        title: upperFirst(intl.formatMessage({id: 'address'})),\n        dataIndex: 'address',\n        key: 'address',\n        align: 'left',\n        className: 'ant_table',\n        width: '40%',\n        render: (text, record, index) => {\n          return record.accountType == 2 ?\n              <span className=\"d-flex\">\n              <Tooltip placement=\"top\" title={intl.formatMessage({id: 'contracts'})}>\n                <span><i className=\"far fa-file mr-1\"></i></span>\n              </Tooltip>\n              \n              <AddressLink address={text} isContract={record.toAddressType == 2}/>\n            </span> :\n              <AddressLink address={text}/>\n        }\n      },\n      {\n        title: upperFirst(intl.formatMessage({id: 'supply'})),\n        dataIndex: 'balance',\n        key: 'supply',\n        align: 'left',\n        className: 'ant_table',\n        // width: '12%',\n        render: (text, record, index) => {\n          return <div><FormattedNumber\n              value={(((parseInt(text) / ONE_TRX) / CIRCULATING_SUPPLY) * 100)}\n              minimumFractionDigits={8}\n              maximumFractionDigits={8}\n          /> %</div>\n        }\n      },\n      {\n        title: upperFirst(intl.formatMessage({id: 'power'})),\n        dataIndex: 'power',\n        key: 'power',\n        align: 'center',\n        // width: '15%',\n        render: (text, record, index) => {\n          return <FormattedNumber value={parseInt(text) / ONE_TRX}/>\n        }\n      },\n      {\n        title: upperFirst(intl.formatMessage({id: 'balance'})),\n        dataIndex: 'balance',\n        key: 'balance',\n        align: 'right',\n        className: 'ant_table',\n        // width: '15%',\n        render: (text, record, index) => {\n          return <TRXPrice amount={parseInt(text) / ONE_TRX}/>\n        }\n      }\n    ];\n    return column;\n  }\n\n  render() {\n\n    let {match, intl} = this.props;\n    let {total, loading, rangeTotal = 0, accounts} = this.state;\n    let column = this.customizedColumn();\n    let tableInfo = intl.formatMessage({id: 'view_total'}) + ' ' + rangeTotal + ' ' + intl.formatMessage({id: 'account_unit'}) + '<br/>' +  '(' + intl.formatMessage({id: 'table_info_big'}) + ')';\n    let tableInfoTip = intl.formatMessage({id: 'table_info_account_tip1'}) + ' ' + rangeTotal + ' ' + intl.formatMessage({id: 'table_info_account_tip2'});\n      return (\n        <main className=\"container header-overlap pb-3 token_black\">\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <div className=\"card h-100 text-center widget-icon accout_unit\">\n                {/* <WidgetIcon className=\"fa fa-users text-secondary\"/> */}\n                <div className=\"card-body\">\n                  <h3 className=\"text-primary\">\n                    <FormattedNumber value={rangeTotal}/>\n                  </h3>\n                  {tu(\"total_accounts\")}\n                </div>\n              </div>\n            </div>\n\n          </div>\n          {loading && <div className=\"loading-style\"><TronLoader/></div>}\n          <div className=\"row mt-2\">\n            <div className=\"col-md-12 table_pos\">\n              {total ?<div className=\"table_pos_info d-none d-md-block\" style={{left: 'auto'}}>\n                      <div>{tu('view_total')} {rangeTotal} {tu('account_unit')} <QuestionMark placement=\"top\" info={tableInfoTip} ></QuestionMark> <br/> <span>({tu('table_info_big')})</span></div>\n              </div> : ''}\n              <SmartTable bordered={true} loading={loading} column={column} data={accounts} total={total}\n                          onPageChange={(page, pageSize) => {\n                            this.loadAccounts(page, pageSize)\n                          }}/>\n            </div>\n          </div>\n        </main>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    accounts: state.app.accounts,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadAccounts,\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Accounts))\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Accounts.js"],"sourceRoot":""}
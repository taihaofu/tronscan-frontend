{"version":3,"sources":["components/tools/NodeTester/index.js"],"names":["NodeTester","props","hideModal","setState","modal","isValid","ip","port","isValidIp","test","isValidPort","isNaN","parseInt","stopListening","listener","close","active","logs","testNode","query","on","status","id","state","slice","setPort","ev","target","value","prevProps","prevState","length","width","map","log","msg","responseTime","Component"],"mappings":"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","file":"static/js/NodeTester.1c87d593.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {trim} from \"lodash\";\nimport {channel} from \"../../../services/api\";\nimport {tu} from \"../../../utils/i18n\";\n\n\nclass NodeTester extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.id = 0;\n    this.listener = null;\n\n    this.state = {\n      ip: \"\",\n      port: 50051,\n      active: false,\n      logs: [],\n    };\n  }\n\n  componentDidMount() {\n\n  }\n\n  hideModal = () => {\n    this.setState({\n      modal: null,\n    });\n  };\n\n  isValid = (ip, port) => {\n    let isValidIp = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ip);\n    let isValidPort = !isNaN(parseInt(port, 10)) && port > 0;\n\n    return isValidIp && isValidPort;\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n\n  }\n\n  componentWillUnmount() {\n    this.listener && this.listener.close();\n  }\n\n  stopListening = () => {\n    this.listener && this.listener.close();\n    this.setState({\n      active: false,\n      logs: [],\n    });\n  };\n\n  testNode = (ip) => {\n   // return\n    this.listener && this.listener.close();\n    this.listener = channel(\"/nodetest-\" + ip, {\n      query: {\n        ip,\n      }\n    });\n\n    this.listener.on(\"connect\", () => {\n      this.setState({\n        active: true,\n      });\n    });\n\n    this.listener.on(\"node-status\", status => {\n      this.setState(state => ({\n        logs: [{\n          ...status,\n          id: this.id++,\n        }, ...state.logs.slice(0, 9)],\n      }));\n    });\n  };\n\n  setPort = (ev) => {\n\n    let port = trim(ev.target.value);\n\n    if (port !== '') {\n      port = parseInt(port, 10);\n      port = isNaN(port) ? 0 : port;\n    }\n\n    this.setState({port});\n  };\n\n  render() {\n\n    let {ip, port, modal, active, logs} = this.state;\n\n    return (\n        <main className=\"container header-overlap _tester\">\n          {modal}\n\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <h5 className=\"card-title text-left\">{tu(\"node_tester\")}\n                <span className=\"_tester_msg\">\n               {tu(\"node_tester_msg\")}\n            </span>\n              </h5>\n              <div className=\"text-left\">\n                <span>IP</span>\n              </div>\n              <input\n                  className=\"form-control text-left\"\n                  type=\"text\"\n                  placeholder=\"123.123.123.123\"\n                  value={ip}\n                  onChange={ev => this.setState({ip: ev.target.value})}/><br/>\n              <div className=\"text-left\">\n                <span>Port</span>\n              </div>\n              <input\n                  className=\"form-control text-left\"\n                  type=\"text\"\n                  placeholder=\"50051\"\n                  value={port}\n                  onChange={this.setPort}/>\n              <div className=\"text-left\">\n                {\n                  active ?\n                      <button className=\"btn\"\n                              onClick={() => this.stopListening()}>{tu(\"node_tester_stop\")}\n                      </button> :\n                      <button className=\"btn\"\n                              disabled={!this.isValid(ip, port)}\n                              onClick={() => this.testNode(ip + \":\" + port)}>\n                        {tu(\"node_tester_test\")}\n                      </button>\n                }\n              </div>\n            </div>\n          </div>\n          {\n            (active && logs.length === 0) &&\n            <div className=\"card mt-3\">\n              <table className=\"table table-hover table-striped bg-white m-0\">\n                <thead className=\"thead-dark\">\n                <tr align=\"center\">\n                  <th>{tu(\"connection_node\")}</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr>\n                  <td align=\"center\">{tu(\"loading\")}</td>\n                </tr>\n                </tbody>\n              </table>\n            </div>\n          }\n          {\n            logs.length > 0 &&\n            <div className=\"card mt-3\">\n              <table className=\"table table-hover table-striped bg-white m-0\">\n                <thead className=\"thead-dark\">\n                <tr>\n                  <th>{tu(\"message\")}</th>\n                  <th style={{width: 200}}>{tu(\"node_tester_rt\")}</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                  logs.map(log => (\n                      <tr key={log.id}>\n                        <td>{log.msg}</td>\n                        <td>{log.responseTime} ms</td>\n                      </tr>\n                  ))\n                }\n                </tbody>\n              </table>\n            </div>\n          }\n        </main>\n    );\n  }\n}\n\nexport default NodeTester;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/tools/NodeTester/index.js"],"sourceRoot":""}